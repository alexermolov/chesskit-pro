import { PgnParser } from "@/lib/pgnParser";
import { MoveTreeUtils, MoveTree, MoveTreeNode } from "@/types/moveTree";

const testPgn = `1.d4 d5 2.c4 c6 3.cxd5 cxd5 4.Nc3 
    ( 4.Bg5 { [%draw arrow,g5,d8,green]} 4...Qb6 { [%draw 
    arrow,b6,b2,green]} 
        ( 4...Nc6 5.Nc3 Qb6 
            ( 5...Nf6 6.Bxf6 exf6 { [%draw full,d5,green]} 
                ( 6...gxf6 7.e3 e6 8.Bd3 Bd6 9.Nf3 f5 10.g3 Bd7 11.O-O Rc8
                12.Rc1 h5 
                    ( 12...O-O { [%draw arrow,b2,b4,green] [%draw 
                    arrow,d1,e2,green]} )
                )
            7.e3 Bb4 8.Ne2 O-O 9.Rc1 { [%draw arrow,e2,f4,green] [%draw 
            arrow,f4,d5,green]} 9...Be6 10.Nf4 Rc8 { [%draw 
            arrow,a2,a3,green] [%draw arrow,d1,f3,green]} 11.Bd3 { [%draw 
            arrow,a2,a3,green] [%draw arrow,d1,f3,green] [%draw 
            arrow,e1,g1,green]} )
        6.Nxd5 
            ( 6.e4 dxe4 
                ( 6...e6 7.exd5 exd5 8.Bb5 a6 
                    ( 8...Bb4 9.Qa4 )
                    ( 8...Be6 )
                9.Nxd5 Qxb5 10.Nc7+ { [%draw arrow,c7,b5,green] [%draw 
                arrow,c7,e8,green] [%draw arrow,c7,a8,green]} )
            7.d5 Nb4 
                ( 7...Ne5 8.Be3 Qxb2 9.Nb5 { [%draw arrow,b5,c7,green] 
                [%draw arrow,e3,d4,green]} )
            8.Bb5+ Bd7 9.Bxd7+ Kxd7 10.Nxe4 )
        6...Qa5+ {–û–®–ò–ë–ö–ê!} )
        ( 4...h6 5.Bh4 g5 
            ( 5...Qb6 6.Nc3 Qxb2 
                ( 6...e6 { [%draw full,c8,green]} 7.Qd2 )
            7.Nxd5 e6 8.Rb1 { [%draw arrow,b1,b4,green]} 8...Qxa2 )
        6.Bg3 )
    5.Nc3 Qxb2 
        ( 5...e6 { [%draw full,c8,green]} 6.Qd2 { [%draw 
        arrow,d2,b2,green] [%draw arrow,e2,e3,green] [%draw 
        arrow,f1,d3,green] [%draw arrow,g1,f3,green] [%draw 
        arrow,e1,g1,green]} )
    6.Nxd5 { [%draw arrow,d5,c7,green]} 6...Na6 { [%draw 
    arrow,a6,c7,green]} 7.e4 { [%draw arrow,f1,a6,green]} 7...e6 8.Rb1 
    Qxa2 9.Bb5+ Bd7 10.Ra1 
        ( 10.Bxd7+ Kxd7 11.Rxb7+ Kc8 12.Rxf7 )
    10...Qb2 11.Bxd7+ Kxd7 12.Qa4+ )
4...Nc6 5.Bg5 f6 
    ( 5...h6 6.Bh4 Qb6 )
6.Bh4 
    ( 6.Bd2 Nxd4 7.e3 Nc6 
        ( 7...Nf5 8.Bd3 e5 9.Nge2 { [%draw arrow,d1,b3,green] [%draw 
        arrow,a1,c1,green]} )
    8.Qh5+ g6 9.Qxd5 Qxd5 10.Nxd5 { [%draw full,e7,green] [%draw 
    full,f6,green] [%draw full,g6,green]} )
6...Nh6 
    { [%draw arrow,h6,f5,green] [%draw full,h4,green]}
*`;

interface PgnDebugUtils {
  parsePgn: (pgn?: string) => any;
  generatePgn: (moveTree?: MoveTree) => string;
  comparePgn: (originalPgn?: string) => any;
  inspectNode: (nodeId: string) => any;
  cleanPgnForComparison: (pgn: string) => string;
  getNodeDepth: (moveTree: MoveTree, nodeId: string) => number;
  analyzeDetailedDifferences: (
    originalPgn: string,
    generatedPgn: string
  ) => void;
  help: () => void;
}

const pgnDebugUtils: PgnDebugUtils = {
  // –ü–∞—Ä—Å–∏–Ω–≥ PGN –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  parsePgn(pgn = testPgn) {
    try {
      console.log("üîç –ü–∞—Ä—Å–∏–Ω–≥ PGN...");

      const result = PgnParser.parsePgnToMoveTree(pgn);

      console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:");
      console.log(
        "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤:",
        Object.keys(result.moveTree.nodes).length
      );
      console.log("üéØ –ö–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª:", result.moveTree.rootId);
      console.log("üéÆ –¢–µ–∫—É—â–∏–π —É–∑–µ–ª:", result.moveTree.currentNodeId);
      console.log("üìù FEN –ø–æ–∑–∏—Ü–∏—è:", result.game.fen());

      console.log("\nüå≥ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞:");
      Object.entries(result.moveTree.nodes).forEach(([nodeId, node]) => {
        const indent = "  ".repeat(this.getNodeDepth(result.moveTree, nodeId));
        const moveInfo = node.move ? `${node.san}` : "ROOT";
        const comment = node.comment ? ` {${node.comment}}` : "";
        console.log(`${indent}${nodeId}: ${moveInfo}${comment}`);
      });

      (window as any).lastParsedResult = result;
      return result;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:", error);
      return null;
    }
  },

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PGN –∏–∑ –¥–µ—Ä–µ–≤–∞
  generatePgn(moveTree = (window as any).lastParsedResult?.moveTree) {
    if (!moveTree) {
      console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–µ—Ä–µ–≤–∞ —Ö–æ–¥–æ–≤. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ parsePgn()");
      return "";
    }

    try {
      console.log("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PGN –∏–∑ –¥–µ—Ä–µ–≤–∞...");

      const generatedPgn = MoveTreeUtils.toPgn(moveTree);

      console.log("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PGN:");
      console.log(generatedPgn);

      return generatedPgn;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", error);
      return "";
    }
  },

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ PGN
  comparePgn(originalPgn = testPgn) {
    console.log("üîç –ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ PGN...\n");

    const result = this.parsePgn(originalPgn);
    if (!result) return;

    const generatedPgn = this.generatePgn(result.moveTree);

    console.log("üìã –ò–°–•–û–î–ù–´–ô PGN:");
    console.log("‚îÄ".repeat(50));
    console.log(originalPgn);

    console.log("\nüîß –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô PGN:");
    console.log("‚îÄ".repeat(50));
    console.log(generatedPgn);

    console.log("\nüîç –ê–ù–ê–õ–ò–ó –†–ê–ó–õ–ò–ß–ò–ô:");
    console.log("‚îÄ".repeat(50));

    const originalClean = this.cleanPgnForComparison(originalPgn);
    const generatedClean = this.cleanPgnForComparison(generatedPgn);

    console.log("–ò—Å—Ö–æ–¥–Ω—ã–π (–æ—á–∏—â–µ–Ω–Ω—ã–π):", originalClean);
    console.log("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (–æ—á–∏—â–µ–Ω–Ω—ã–π):", generatedClean);
    console.log(
      "–°–æ–≤–ø–∞–¥–∞—é—Ç:",
      originalClean === generatedClean ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢"
    );

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
    this.analyzeDetailedDifferences(originalPgn, generatedPgn);

    return {
      original: originalPgn,
      generated: generatedPgn,
      match: originalClean === generatedClean,
    };
  },

  // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
  analyzeDetailedDifferences(originalPgn: string, generatedPgn: string) {
    console.log("\nüî¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ê–ó–õ–ò–ß–ò–ô:");
    console.log("‚îÄ".repeat(50));

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const originalTokens = originalPgn
      .split(/\s+/)
      .filter((token) => token.trim());
    const generatedTokens = generatedPgn
      .split(/\s+/)
      .filter((token) => token.trim());

    console.log(
      `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ - –ò—Å—Ö–æ–¥–Ω—ã–π: ${originalTokens.length}, –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${generatedTokens.length}`
    );

    // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—ã–µ —Ä–∞–∑–ª–∏—á–∞—é—â–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã
    let firstDiff = -1;
    for (
      let i = 0;
      i < Math.min(originalTokens.length, generatedTokens.length);
      i++
    ) {
      if (originalTokens[i] !== generatedTokens[i]) {
        firstDiff = i;
        break;
      }
    }

    if (firstDiff >= 0) {
      console.log(`‚ùå –ü–µ—Ä–≤–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${firstDiff}:`);
      console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π: "${originalTokens[firstDiff]}"`);
      console.log(`   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: "${generatedTokens[firstDiff]}"`);

      // –ü–æ–∫–∞–∂–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —Ä–∞–∑–ª–∏—á–∏—è
      const start = Math.max(0, firstDiff - 3);
      const end = Math.min(originalTokens.length, firstDiff + 4);
      console.log(`\nüîç –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–ª–∏—á–∏—è:`);
      console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π: ${originalTokens.slice(start, end).join(" ")}`);
      console.log(
        `   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${generatedTokens.slice(start, Math.min(generatedTokens.length, firstDiff + 4)).join(" ")}`
      );
    } else if (originalTokens.length !== generatedTokens.length) {
      console.log(`‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –Ω–æ —Ä–∞–∑–Ω–∞—è –¥–ª–∏–Ω–∞`);
    } else {
      console.log(`‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç!`);
    }

    // –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const originalComments = originalPgn.match(/\{[^}]*\}/g) || [];
    const generatedComments = generatedPgn.match(/\{[^}]*\}/g) || [];

    console.log(
      `\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - –ò—Å—Ö–æ–¥–Ω—ã–π: ${originalComments.length}, –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${generatedComments.length}`
    );
    if (originalComments.length !== generatedComments.length) {
      console.log(`‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!`);
      console.log(
        `   –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${originalComments.slice(0, 3).join(", ")}${originalComments.length > 3 ? "..." : ""}`
      );
      console.log(
        `   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${generatedComments.slice(0, 3).join(", ")}${generatedComments.length > 3 ? "..." : ""}`
      );
    }

    // –ê–Ω–∞–ª–∏–∑ –≤–∞—Ä–∏–∞—Ü–∏–π
    const originalVariations = (originalPgn.match(/\(/g) || []).length;
    const generatedVariations = (generatedPgn.match(/\(/g) || []).length;

    console.log(
      `\nüåø –í–∞—Ä–∏–∞—Ü–∏–∏ - –ò—Å—Ö–æ–¥–Ω—ã–π: ${originalVariations}, –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${generatedVariations}`
    );
    if (originalVariations !== generatedVariations) {
      console.log(`‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞—Ü–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!`);
    }
  },

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–ª—É–±–∏–Ω—ã —É–∑–ª–∞
  getNodeDepth(moveTree: MoveTree, nodeId: string) {
    let depth = 0;
    let currentId: string | null = nodeId;

    while (currentId && currentId !== moveTree.rootId) {
      const node = moveTree.nodes[currentId];
      if (!node) break;
      currentId = node.parent;
      depth++;
    }

    return depth;
  },

  // –û—á–∏—Å—Ç–∫–∞ PGN –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã)
  cleanPgnForComparison(pgn: string) {
    return pgn
      .replace(/\{[^}]*\}/g, "") // –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      .replace(/\s+/g, " ") // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
      .replace(/\(\s+/g, "(") // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ (
      .replace(/\s+\)/g, ")") // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ )
      .trim();
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —É–∑–ª–µ
  inspectNode(nodeId: string) {
    const result = (window as any).lastParsedResult;
    if (!result) {
      console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ parsePgn()");
      return;
    }

    const node = result.moveTree.nodes[nodeId];
    if (!node) {
      console.warn(`‚ö†Ô∏è –£–∑–µ–ª ${nodeId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    console.log(`üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–∑–ª–µ ${nodeId}:`);
    console.log("  –•–æ–¥:", node.move ? node.san : "ROOT");
    console.log("  –†–æ–¥–∏—Ç–µ–ª—å:", node.parent || "–Ω–µ—Ç");
    console.log(
      "  –î–µ—Ç–∏:",
      node.children.length ? node.children.join(", ") : "–Ω–µ—Ç"
    );
    console.log("  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", node.comment || "–Ω–µ—Ç");
    console.log("  FEN:", node.fen);

    return node;
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  help() {
    console.log("üÜò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ PGN:");
    console.log("‚îÄ".repeat(50));
    console.log("pgnDebugUtils.parsePgn(pgn)         - –ü–∞—Ä—Å–∏–Ω–≥ PGN");
    console.log("pgnDebugUtils.generatePgn(tree)     - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PGN");
    console.log(
      "pgnDebugUtils.comparePgn(pgn)       - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ"
    );
    console.log("pgnDebugUtils.inspectNode(nodeId)   - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–∑–ª–µ");
    console.log("pgnDebugUtils.cleanPgnForComparison - –û—á–∏—Å—Ç–∫–∞ PGN");
    console.log("pgnDebugUtils.help()                - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞");
    console.log("\nüìù –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:");
    console.log("pgnDebugUtils.parsePgn()");
    console.log("pgnDebugUtils.comparePgn()");
    console.log("pgnDebugUtils.inspectNode('root')");
  },
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== "undefined") {
  (window as any).pgnDebugUtils = pgnDebugUtils;
  (window as any).testPgn = testPgn;

  console.log("üéØ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ PGN –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");
  console.log("üí° –í–≤–µ–¥–∏—Ç–µ pgnDebugUtils.help() –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥");
  console.log("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: pgnDebugUtils.comparePgn()");
}

export { pgnDebugUtils, testPgn };
