import { PgnParser } from "@/lib/pgnParser";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
export function testPgnParser() {
  const testPgn = `1. e4 e5 2. Nf3 Nc6 3. Bb5 (3. Bc4 Be7 4. d3) 3... a6 4. Ba4 Nf6 5. O-O Be7 (5... b5 6. Bb3 Bb7) 6. Re1 *`;
  
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º PGN –ø–∞—Ä—Å–µ—Ä —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏:");
  console.log("PGN:", testPgn);
  
  const result = PgnParser.parsePgnToMoveTree(testPgn);
  console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:");
  console.log("- –£–∑–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ:", Object.keys(result.moveTree.nodes).length);
  console.log("- –ö–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª:", result.moveTree.nodes[result.moveTree.rootId]);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–µ—Ç–æ–∫
  let branchCount = 0;
  Object.values(result.moveTree.nodes).forEach(node => {
    if (node.children.length > 1) {
      branchCount++;
      console.log("üåø –£–∑–µ–ª —Å –≤–µ—Ç–∫–∞–º–∏:", node.san, "‚Üí", node.children.length, "–¥–µ—Ç–µ–π");
    }
  });
  
  console.log("üå≥ –í—Å–µ–≥–æ —É–∑–ª–æ–≤ —Å –≤–µ—Ç–∫–∞–º–∏:", branchCount);
  
  return result;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ window –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== "undefined") {
  (window as any).testPgnParser = testPgnParser;
}
