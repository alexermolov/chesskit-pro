import { PgnParser } from "./pgnParser";
import {
  TEST_PGN_WITH_VARIATIONS,
  SIMPLE_PGN,
  COMPLEX_PGN_WITH_MULTIPLE_VARIATIONS,
  PGN_WITH_NESTED_VARIATIONS,
} from "./testPgn";

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä PGN –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏—è—Ö
 */
export function testPgnParser() {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PGN –ø–∞—Ä—Å–µ—Ä–∞...");

  const testCases = [
    { name: "–ü—Ä–æ—Å—Ç–æ–π PGN", pgn: SIMPLE_PGN },
    { name: "PGN —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏", pgn: TEST_PGN_WITH_VARIATIONS },
    {
      name: "–°–ª–æ–∂–Ω—ã–π PGN —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏",
      pgn: COMPLEX_PGN_WITH_MULTIPLE_VARIATIONS,
    },
    { name: "PGN —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏", pgn: PGN_WITH_NESTED_VARIATIONS },
  ];

  const results = testCases.map((testCase) => {
    try {
      console.log(`\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${testCase.name}`);
      console.log(`PGN: ${testCase.pgn.substring(0, 100)}...`);

      const result = PgnParser.parsePgnToMoveTree(testCase.pgn);
      const nodeCount = Object.keys(result.moveTree.nodes).length;

      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ! –°–æ–∑–¥–∞–Ω–æ —É–∑–ª–æ–≤: ${nodeCount}`);
      console.log(`üìä –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä—ã: ${result.game.fen()}`);

      return {
        name: testCase.name,
        success: true,
        nodeCount,
        error: null,
      };
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error);
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
      return {
        name: testCase.name,
        success: false,
        nodeCount: 0,
        error: errorMessage,
      };
    }
  });

  console.log("\nüìà –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:");
  results.forEach((result) => {
    const status = result.success ? "‚úÖ" : "‚ùå";
    console.log(
      `${status} ${result.name}: ${
        result.success ? `${result.nodeCount} —É–∑–ª–æ–≤` : result.error
      }`
    );
  });

  const successCount = results.filter((r) => r.success).length;
  console.log(`\nüéØ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${successCount}/${results.length}`);

  return results;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π PGN –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 */
export function debugPgnParsing(pgn: string) {
  console.log("üîç –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PGN –ø–∞—Ä—Å–µ—Ä–∞:");
  console.log(`PGN: ${pgn}`);

  try {
    const result = PgnParser.parsePgnToMoveTree(pgn);

    console.log("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:");
    console.log(
      `- –£–∑–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ: ${Object.keys(result.moveTree.nodes).length}`
    );
    console.log(`- –ö–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª: ${result.moveTree.rootId}`);
    console.log(`- –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä—ã: ${result.game.fen()}`);

    console.log("\nüå≥ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞:");
    Object.entries(result.moveTree.nodes).forEach(([nodeId, node]) => {
      const parentInfo = node.parent
        ? ` (—Ä–æ–¥–∏—Ç–µ–ª—å: ${node.parent})`
        : " (–∫–æ—Ä–µ–Ω—å)";
      const childrenInfo =
        node.children.length > 0 ? ` –¥–µ—Ç–µ–π: ${node.children.length}` : "";
      console.log(
        `  ${nodeId}: ${node.san || "root"}${parentInfo}${childrenInfo}`
      );
    });

    return result;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:", error);
    throw error;
  }
}
