import { useChessActionsWithBranches } from "@/hooks/useChessActionsWithBranches";
import { PgnParser } from "@/lib/pgnParser";
import { MoveTree } from "@/types/moveTree";
import { Icon } from "@iconify/react";
import { Box, IconButton, TextField, useTheme } from "@mui/material";
import { useCallback, useMemo, useState } from "react";
import { boardAtom } from "../../../states";

export default function BranchesMovesPanel() {
  const { goToNode, moveTree, updateNodeComment } =
    useChessActionsWithBranches(boardAtom);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ö–æ–¥—É –ø–æ nodeId
  const handleMoveClick = (nodeId: string) => {
    goToNode(nodeId);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const handleCommentUpdate = useCallback(
    (nodeId: string, comment: string | null) => {
      updateNodeComment(nodeId, comment);
    },
    [updateNodeComment]
  );

  return (
    <Box
      sx={{
        width: "100%",
        minWidth: 0, // –ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É —Å–∂–∏–º–∞—Ç—å—Å—è
        padding: 1,
        overflowY: "auto", // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        overflowX: "hidden", // –°–∫—Ä—ã–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        maxHeight: "40vh",
        fontSize: "0.9rem",
        lineHeight: 1.4,
      }}
      id="moves-panel"
    >
      <Box
        sx={{
          fontSize: "0.95rem",
          fontFamily: "monospace",
          width: "100%",
          boxSizing: "border-box",
        }}
      >
        <PgnDisplay
          moveTree={moveTree}
          onMoveClick={handleMoveClick}
          onCommentUpdate={handleCommentUpdate}
          currentNodeId={moveTree?.currentNodeId || ""}
        />
      </Box>
    </Box>
  );
}

// –ù–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è PGN —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Ö–æ–¥–∞–º–∏
interface PgnDisplayProps {
  moveTree: MoveTree;
  onMoveClick: (nodeId: string) => void;
  onCommentUpdate: (nodeId: string, comment: string | null) => void;
  currentNodeId: string;
}

// –¢–∏–ø—ã –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
type ElementType =
  | "move" // –•–æ–¥ (—Å–∞–Ω-–Ω–æ—Ç–∞—Ü–∏—è)
  | "moveNumber" // –ù–æ–º–µ—Ä —Ö–æ–¥–∞ (1., 5..., –∏ —Ç.–¥.)
  | "comment" // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  | "variationStart" // –ù–∞—á–∞–ª–æ –≤–∞—Ä–∏–∞—Ü–∏–∏ (
  | "variationEnd" // –ö–æ–Ω–µ—Ü –≤–∞—Ä–∏–∞—Ü–∏–∏ )
  | "result" // –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Ç–∏–∏ (* –∏–ª–∏ 1-0, 0-1, 1/2-1/2)
  | "space"; // –ü—Ä–æ–±–µ–ª

// –≠–ª–µ–º–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Ö–æ–¥–æ–≤
interface DisplayElement {
  id: string; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
  type: ElementType; // –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
  text: string; // –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  nodeId?: string; // ID —É–∑–ª–∞ –≤ –¥–µ—Ä–µ–≤–µ —Ö–æ–¥–æ–≤ (–¥–ª—è move –∏ comment)
  indentLevel: number; // –£—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–∞ –¥–ª—è –≤–∞—Ä–∏–∞—Ü–∏–π
  needsNewLine: boolean; // –ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–º
  forceLineBreakAfter?: boolean; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —ç–ª–µ–º–µ–Ω—Ç–∞
}

function PgnDisplay({
  moveTree,
  onMoveClick,
  onCommentUpdate,
  currentNodeId,
}: PgnDisplayProps) {
  const theme = useTheme();
  const [editingComment, setEditingComment] = useState<string | null>(null);
  const [commentText, setCommentText] = useState<string>("");

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
  const handleStartEditComment = useCallback(
    (nodeId: string, currentComment: string) => {
      setEditingComment(nodeId);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å, —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –∏ —á–∞—Å—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const textOnly =
        PgnParser.removeClockAndArrowsFromComment(currentComment);
      setCommentText(textOnly);
    },
    []
  );

  const handleSaveComment = useCallback(
    (nodeId: string) => {
      const trimmedComment = commentText.trim();

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∑–ª–∞
      const currentNode = moveTree.nodes[nodeId];
      const currentComment = currentNode?.comment || "";

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–µ–ª–∫–∏ –∏ —á–∞—Å—ã
      const existingArrows = PgnParser.extractArrowsFromComment(currentComment);
      const existingClock = PgnParser.extractClockFromComment(currentComment);

      // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
      let finalComment = trimmedComment;

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫–∏
      existingArrows.forEach((arrow) => {
        finalComment += ` [%draw arrow,${arrow.from},${arrow.to}${
          arrow.color ? `,${arrow.color}` : ""
        }]`;
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—ã
      if (existingClock) {
        finalComment += ` [%clk ${existingClock}]`;
      }

      onCommentUpdate(nodeId, finalComment.trim() || null);
      setEditingComment(null);
      setCommentText("");
    },
    [commentText, onCommentUpdate, moveTree]
  );

  const handleCancelEdit = useCallback(() => {
    setEditingComment(null);
    setCommentText("");
  }, []);

  // Function to format comment with arrows
  const formatCommentWithArrows = useCallback((commentText: string) => {
    const arrows = PgnParser.extractArrowsFromComment(commentText);

    if (arrows.length === 0) {
      // Even if no arrows, still remove clock annotations and empty braces
      return PgnParser.removeClockAndArrowsFromComment(commentText);
    }

    let formattedText = commentText;

    // Use the original regex from PgnParser to find and replace arrows
    const arrowRegex =
      /\[%draw\s+arrow[\s,]+([a-h][1-8])[\s,]+([a-h][1-8])(?:[\s,]+([^;\]]+))?\]/g;

    formattedText = formattedText.replace(arrowRegex, (_, from, to, color) => {
      let colorIcon = "";
      const normalizedColor = color?.toLowerCase()?.trim() || "default";

      switch (normalizedColor) {
        case "red":
        case "r":
          colorIcon = "üî¥";
          break;
        case "green":
        case "g":
          colorIcon = "üü¢";
          break;
        case "blue":
        case "b":
          colorIcon = "üîµ";
          break;
        case "yellow":
        case "y":
          colorIcon = "üü°";
          break;
        case "orange":
        case "o":
          colorIcon = "üü†";
          break;
        default:
          colorIcon = "‚û§";
          break;
      }

      return `${colorIcon} ${from}‚Üí${to}`;
    });

    // Use the PgnParser function to properly remove clock annotations and empty braces
    formattedText = PgnParser.removeClockAndArrowsFromComment(formattedText);

    return formattedText;
  }, []);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã (–º–µ–º–æ–∏–∑–∏—Ä—É–µ–º)
  const colors = useMemo(
    () => ({
      moveColor: theme.palette.mode === "dark" ? "#64b5f6" : "#1976d2",
      hoverColor:
        theme.palette.mode === "dark"
          ? "rgba(100, 181, 246, 0.1)"
          : "rgba(25, 118, 210, 0.1)",
    }),
    [theme.palette.mode]
  );

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ä–µ–≤–∞ —Ö–æ–¥–æ–≤
  // –ê–ª–≥–æ—Ä–∏—Ç–º –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω toPgn, –Ω–æ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É
  const displayElements = useMemo(() => {
    if (!moveTree || !moveTree.nodes || !moveTree.rootId) {
      return [];
    }

    const elements: DisplayElement[] = [];
    let elementId = 0;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —ç–ª–µ–º–µ–Ω—Ç–∞
    const generateElementId = () => {
      return `el_${elementId++}`;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–æ–º–µ—Ä–∞ —Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏ –æ—Ç –∫–æ—Ä–Ω—è
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ getMoveNumber –≤ toPgn
    const getMoveNumber = (nodeId: string): number => {
      let currentId = nodeId;
      let moveCount = 0;

      while (currentId && currentId !== moveTree.rootId) {
        const node = moveTree.nodes[currentId];
        if (node && node.move) {
          moveCount++;
        }
        currentId = node?.parent || "";
      }

      return Math.ceil(moveCount / 2);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ö–æ–¥–∞
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ isWhiteMove –≤ toPgn
    const isWhiteMove = (nodeId: string): boolean => {
      let currentId = nodeId;
      let moveCount = 0;

      while (currentId && currentId !== moveTree.rootId) {
        const node = moveTree.nodes[currentId];
        if (node && node.move) {
          moveCount++;
        }
        currentId = node?.parent || "";
      }

      return moveCount % 2 === 1;
    };

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–∑–ª–∞ –∏ –µ–≥–æ –¥–µ—Ç–µ–π
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ processNode –≤ toPgn
    const processNode = (
      nodeId: string,
      skipMove: boolean = false,
      isFirstInVariation: boolean = false,
      insideVariation: boolean = false,
      indentLevel: number = 0
    ): void => {
      const node = moveTree.nodes[nodeId];
      if (!node) return;

      // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ–¥ (–∫—Ä–æ–º–µ –∫–æ—Ä–Ω—è –∏ –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
      if (node.move && !skipMove) {
        const moveNumber = getMoveNumber(nodeId);
        const isWhite = isWhiteMove(nodeId);

        // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞ –≤–∞—Ä–∏–∞—Ü–∏–∏:
        // - –µ—Å–ª–∏ –±–µ–ª—ã–π, —Ç–æ N.—Ö–æ–¥
        // - –µ—Å–ª–∏ —á–µ—Ä–Ω—ã–π, —Ç–æ N...—Ö–æ–¥
        if (isFirstInVariation) {
          if (isWhite) {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ö–æ–¥–∞
            elements.push({
              id: generateElementId(),
              type: "moveNumber",
              text: `${moveNumber}.`,
              indentLevel,
              needsNewLine: false,
            });

            // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ–¥
            elements.push({
              id: generateElementId(),
              type: "move",
              text: node.san,
              nodeId,
              indentLevel,
              needsNewLine: false,
            });
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ö–æ–¥–∞ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º
            elements.push({
              id: generateElementId(),
              type: "moveNumber",
              text: `${moveNumber}...`,
              indentLevel,
              needsNewLine: false,
            });

            // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ–¥
            elements.push({
              id: generateElementId(),
              type: "move",
              text: node.san,
              nodeId,
              indentLevel,
              needsNewLine: false,
            });
          }
        } else {
          // –í–Ω—É—Ç—Ä–∏ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏–Ω–∏–∏:
          // - –±–µ–ª—ã–µ —Ö–æ–¥—ã –≤—Å–µ–≥–¥–∞ —Å –Ω–æ–º–µ—Ä–æ–º
          // - —á–µ—Ä–Ω—ã–µ —Ö–æ–¥—ã –≤—Å–µ–≥–¥–∞ –±–µ–∑ –Ω–æ–º–µ—Ä–∞
          if (isWhite) {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ö–æ–¥–∞
            elements.push({
              id: generateElementId(),
              type: "moveNumber",
              text: `${moveNumber}.`,
              indentLevel,
              needsNewLine: false,
            });

            // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ–¥
            elements.push({
              id: generateElementId(),
              type: "move",
              text: node.san,
              nodeId,
              indentLevel,
              needsNewLine: false,
            });
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ö–æ–¥ –±–µ–∑ –Ω–æ–º–µ—Ä–∞
            elements.push({
              id: generateElementId(),
              type: "move",
              text: node.san,
              nodeId,
              indentLevel,
              needsNewLine: false,
            });
          }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if (node.comment) {
          elements.push({
            id: generateElementId(),
            type: "comment",
            text: node.comment,
            nodeId,
            indentLevel,
            needsNewLine: false,
          });
        }
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ç–µ–π - –∫–æ–Ω–µ—Ü –≤–µ—Ç–∫–∏
      if (node.children.length === 0) {
        return;
      }

      // –ï—Å–ª–∏ –æ–¥–∏–Ω —Ä–µ–±–µ–Ω–æ–∫ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      if (node.children.length === 1) {
        processNode(
          node.children[0],
          false,
          false,
          insideVariation,
          indentLevel
        );
        return;
      }

      // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π - –µ—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
      let mainChild: string | null = null;
      const variations: string[] = [];

      const currentMainIndex = moveTree.mainLineIds.indexOf(nodeId);
      if (
        currentMainIndex !== -1 &&
        currentMainIndex + 1 < moveTree.mainLineIds.length
      ) {
        const nextMainLineId = moveTree.mainLineIds[currentMainIndex + 1];
        if (node.children.includes(nextMainLineId)) {
          mainChild = nextMainLineId;
          variations.push(
            ...node.children.filter((childId) => childId !== nextMainLineId)
          );
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏–Ω–∏–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
      if (!mainChild) {
        mainChild = node.children[0];
        variations.push(...node.children.slice(1));
      }

      // 1. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ö–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏–Ω–∏–∏
      const mainChildNode = moveTree.nodes[mainChild];
      if (mainChildNode && mainChildNode.move) {
        const moveNumber = getMoveNumber(mainChild);
        const isWhite = isWhiteMove(mainChild);

        // –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è - –Ω–æ–º–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –±–µ–ª—ã—Ö
        if (isWhite) {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ö–æ–¥–∞
          elements.push({
            id: generateElementId(),
            type: "moveNumber",
            text: `${moveNumber}.`,
            indentLevel,
            needsNewLine: false,
          });

          // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ–¥
          elements.push({
            id: generateElementId(),
            type: "move",
            text: mainChildNode.san,
            nodeId: mainChild,
            indentLevel,
            needsNewLine: false,
          });
        } else {
          // –ß–µ—Ä–Ω—ã–µ —Ö–æ–¥—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏–Ω–∏–∏ –≤—Å–µ–≥–¥–∞ –±–µ–∑ –Ω–æ–º–µ—Ä–∞
          elements.push({
            id: generateElementId(),
            type: "move",
            text: mainChildNode.san,
            nodeId: mainChild,
            indentLevel,
            needsNewLine: false,
          });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if (mainChildNode.comment) {
          elements.push({
            id: generateElementId(),
            type: "comment",
            text: mainChildNode.comment,
            nodeId: mainChild,
            indentLevel,
            needsNewLine: false,
          });
        }
      }

      // 2. –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
      for (const variationId of variations) {
        // –ù–∞—á–∞–ª–æ –≤–∞—Ä–∏–∞—Ü–∏–∏
        elements.push({
          id: generateElementId(),
          type: "variationStart",
          text: "(",
          indentLevel: indentLevel + 1,
          needsNewLine: true, // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞—Ä–∏–∞—Ü–∏–∏
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é
        processNode(variationId, false, true, true, indentLevel + 1);

        // –ö–æ–Ω–µ—Ü –≤–∞—Ä–∏–∞—Ü–∏–∏
        elements.push({
          id: generateElementId(),
          type: "variationEnd",
          text: ")",
          indentLevel: indentLevel + 1,
          needsNewLine: false,
          forceLineBreakAfter: true, // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ü–û–°–õ–ï –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
        });
      }

      // 3. –ü–æ—Ç–æ–º –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥–µ—Ç–µ–π –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏–Ω–∏–∏ (–ø—Ä–æ–ø—É—Å–∫–∞—è —Å–∞–º —Ö–æ–¥, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏)
      if (mainChildNode) {
        processNode(mainChild, true, false, false, indentLevel);
      }
    };

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω—è
    processNode(moveTree.rootId, false, false, false, 0);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –æ–∫–æ–Ω—á–∞–Ω–∏—è
    elements.push({
      id: generateElementId(),
      type: "result",
      text: "*",
      indentLevel: 0,
      needsNewLine: false,
    });

    return elements;
  }, [moveTree]);

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫–∏
  const renderElements = useMemo(() => {
    if (!displayElements.length) {
      return null;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    const lines: React.ReactNode[] = [];
    let currentLine: React.ReactNode[] = [];
    let lineIndex = 0;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
    const flushLine = () => {
      if (currentLine.length > 0) {
        lines.push(
          <div
            key={`line-${lineIndex++}`}
            style={{
              marginBottom: "3px",
              display: "flex",
              flexWrap: "wrap", // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
              alignItems: "center",
            }}
          >
            {currentLine}
          </div>
        );
        currentLine = [];
      }
    };

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
    displayElements.forEach((element) => {
      // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
      if (element.needsNewLine) {
        flushLine();
      }

      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π React-—ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      let reactElement: React.ReactNode;

      // –û–±—â–∏–π —Å—Ç–∏–ª—å –æ—Ç—Å—Ç—É–ø–∞
      const indentStyle = {
        marginLeft:
          element.indentLevel > 0 ? `${element.indentLevel * 12}px` : 0,
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Ö–æ–¥ —Ç–µ–∫—É—â–∏–º
      const isCurrentMove = element.nodeId === currentNodeId;

      switch (element.type) {
        case "move":
          reactElement = (
            <Box
              key={element.id}
              sx={{
                display: "inline-flex",
                alignItems: "center",
                gap: 0.5,
                margin: "0 2px", // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏
                flexShrink: 0, // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–∂–∞—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                ...indentStyle,
              }}
            >
              <span
                onClick={() => element.nodeId && onMoveClick(element.nodeId)}
                onDoubleClick={() => {
                  if (element.nodeId) {
                    const node = moveTree.nodes[element.nodeId];
                    const currentComment = node?.comment || "";
                    handleStartEditComment(element.nodeId, currentComment);
                  }
                }}
                style={{
                  cursor: "pointer",
                  padding: "2px 4px",
                  borderRadius: "4px",
                  backgroundColor: isCurrentMove ? "#1976d2" : "transparent",
                  color: isCurrentMove ? "white" : colors.moveColor,
                  fontWeight: isCurrentMove ? 600 : 400,
                  transition: "all 0.15s ease",
                  textDecoration: "none",
                  display: "inline-block",
                  whiteSpace: "nowrap", // –ó–∞–ø—Ä–µ—â–∞–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å –≤–Ω—É—Ç—Ä–∏ —Ö–æ–¥–∞
                }}
                onMouseEnter={(e) => {
                  if (!isCurrentMove) {
                    e.currentTarget.style.backgroundColor = colors.hoverColor;
                    e.currentTarget.style.textDecoration = "underline";
                  }
                }}
                onMouseLeave={(e) => {
                  if (!isCurrentMove) {
                    e.currentTarget.style.backgroundColor = "transparent";
                    e.currentTarget.style.textDecoration = "none";
                  }
                }}
                title="–ö–ª–∏–∫ - –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ö–æ–¥—É, –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ - –¥–æ–±–∞–≤–∏—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
              >
                {element.text}
              </span>

              {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç */}
              {element.nodeId && !moveTree.nodes[element.nodeId]?.comment && (
                <IconButton
                  size="small"
                  onClick={(e) => {
                    e.stopPropagation();
                    if (element.nodeId) {
                      handleStartEditComment(element.nodeId, "");
                    }
                  }}
                  sx={{
                    opacity: 0.4,
                    "&:hover": { opacity: 1 },
                    color: theme.palette.mode === "dark" ? "#666" : "#999",
                    fontSize: "0.7rem",
                    padding: "1px",
                  }}
                  title="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
                >
                  <Icon icon="mdi:comment-plus" style={{ fontSize: "10px" }} />
                </IconButton>
              )}

              {/* –ü–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */}
              {element.nodeId && editingComment === element.nodeId && (
                <Box
                  sx={{
                    display: "inline-flex",
                    alignItems: "center",
                    gap: 1,
                    marginLeft: 1,
                  }}
                >
                  <TextField
                    size="small"
                    value={commentText}
                    onChange={(e) => setCommentText(e.target.value)}
                    onKeyDown={(e) => {
                      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞–≤–∏—à
                      e.stopPropagation();

                      if (e.key === "Enter" && e.ctrlKey) {
                        handleSaveComment(element.nodeId!);
                      } else if (e.key === "Escape") {
                        handleCancelEdit();
                      }
                    }}
                    onKeyUp={(e) => {
                      // –¢–∞–∫–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –¥–ª—è keyUp
                      e.stopPropagation();
                    }}
                    placeholder="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
                    sx={{
                      "& .MuiInputBase-root": {
                        fontSize: "0.9em",
                        backgroundColor:
                          theme.palette.mode === "dark" ? "#2e2e2e" : "#f5f5f5",
                        maxWidth: "160px", // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –ø–æ–ª—è –≤–≤–æ–¥–∞
                      },
                    }}
                    autoFocus
                  />
                  <IconButton
                    size="small"
                    onClick={() => handleSaveComment(element.nodeId!)}
                    sx={{ color: "#4caf50" }}
                  >
                    <Icon icon="mdi:check" />
                  </IconButton>
                  <IconButton
                    size="small"
                    onClick={handleCancelEdit}
                    sx={{ color: "#f44336" }}
                  >
                    <Icon icon="mdi:close" />
                  </IconButton>
                </Box>
              )}
            </Box>
          );
          break;

        case "moveNumber":
          reactElement = (
            <span
              key={element.id}
              style={{
                color: theme.palette.mode === "dark" ? "#888" : "#333",
                marginRight: "3px",
                fontWeight: 600,
                fontSize: "0.95em",
                display: "inline-block",
                whiteSpace: "nowrap", // –ó–∞–ø—Ä–µ—â–∞–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å –≤–Ω—É—Ç—Ä–∏ –Ω–æ–º–µ—Ä–∞ —Ö–æ–¥–∞
                flexShrink: 0, // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–∂–∞—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                ...indentStyle,
              }}
            >
              {element.text}
            </span>
          );
          break;

        case "comment":
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ —Å–µ–π—á–∞—Å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
          if (element.nodeId && editingComment === element.nodeId) {
            reactElement = null; // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ä—è–¥–æ–º —Å —Ö–æ–¥–æ–º
          } else {
            reactElement = (
              <Box
                key={element.id}
                sx={{
                  display: "inline-flex",
                  alignItems: "center",
                  gap: 0.5,
                  margin: "0 2px",
                  flexShrink: 0, // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–∂–∞—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                  ...indentStyle,
                }}
              >
                <span
                  style={{
                    color:
                      theme.palette.mode === "dark" ? "#4caf50" : "#2e7d32",
                    fontStyle: "italic",
                    fontSize: "0.9em",
                    fontWeight: 500,
                    cursor: element.nodeId ? "pointer" : "default",
                  }}
                  onClick={() => {
                    if (element.nodeId) {
                      handleStartEditComment(element.nodeId, element.text);
                    }
                  }}
                  title={
                    element.nodeId
                      ? "–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
                      : undefined
                  }
                >
                  {`{${formatCommentWithArrows(element.text)}}`}
                </span>
                {element.nodeId && (
                  <IconButton
                    size="small"
                    onClick={() => {
                      if (element.nodeId) {
                        handleStartEditComment(element.nodeId, element.text);
                      }
                    }}
                    sx={{
                      opacity: 0.6,
                      "&:hover": { opacity: 1 },
                      color:
                        theme.palette.mode === "dark" ? "#4caf50" : "#2e7d32",
                      fontSize: "0.8rem",
                      padding: "2px",
                    }}
                  >
                    <Icon icon="mdi:pencil" style={{ fontSize: "12px" }} />
                  </IconButton>
                )}
              </Box>
            );
          }
          break;

        case "variationStart":
          reactElement = (
            <span
              key={element.id}
              style={{
                color: "#999",
                margin: "0 2px",
                display: "inline-block",
                whiteSpace: "nowrap",
                flexShrink: 0, // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–∂–∞—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                ...indentStyle,
              }}
            >
              {element.text}
            </span>
          );
          break;

        case "variationEnd":
          reactElement = (
            <span
              key={element.id}
              style={{
                color: "#999",
                margin: "0 2px",
                display: "inline-block",
                whiteSpace: "nowrap",
                flexShrink: 0, // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–∂–∞—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                ...indentStyle,
              }}
            >
              {element.text}
            </span>
          );
          break;

        case "result":
          reactElement = (
            <span
              key={element.id}
              style={{
                color: "#666",
                margin: "0 2px",
                display: "inline-block",
                whiteSpace: "nowrap",
                flexShrink: 0, // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–∂–∞—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                ...indentStyle,
              }}
            >
              {element.text}
            </span>
          );
          break;

        case "space":
        default:
          reactElement = (
            <span
              key={element.id}
              style={{
                margin: "0 2px",
                display: "inline-block",
                whiteSpace: "nowrap",
                flexShrink: 0, // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–∂–∞—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                ...indentStyle,
              }}
            >
              {element.text}
            </span>
          );
          break;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
      if (reactElement) {
        currentLine.push(reactElement);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      if (element.forceLineBreakAfter) {
        flushLine();
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
    if (currentLine.length > 0) {
      flushLine();
    }

    return lines;
  }, [
    displayElements,
    currentNodeId,
    moveTree,
    colors,
    onMoveClick,
    theme.palette.mode,
    editingComment,
    commentText,
    handleStartEditComment,
    handleSaveComment,
    handleCancelEdit,
    formatCommentWithArrows,
  ]);

  return (
    <Box
      sx={{
        lineHeight: 1.5,
        wordSpacing: "1px",
        padding: 1,
        display: "block",
        width: "100%",
        boxSizing: "border-box",
        overflowWrap: "break-word", // –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Å–ª–æ–≤–∞
      }}
    >
      {renderElements}
    </Box>
  );
}
