import { PgnParser } from "@/lib/pgnParser";

export class CommentUtils {
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –∑–∞–º–µ–Ω–æ–π —Å—Ç—Ä–µ–ª–æ–∫ –Ω–∞ –∏–∫–æ–Ω–∫–∏
  static formatCommentWithArrows(commentText: string): string {
    const arrows = PgnParser.extractArrowsFromComment(commentText);

    if (arrows.length === 0) {
      // Even if no arrows, still remove clock annotations and empty braces
      return PgnParser.removeClockAndArrowsFromComment(commentText);
    }

    let formattedText = commentText;

    // Use the original regex from PgnParser to find and replace arrows
    const arrowRegex =
      /\[%draw\s+arrow[\s,]+([a-h][1-8])[\s,]+([a-h][1-8])(?:[\s,]+([^;\]]+))?\]/g;

    formattedText = formattedText.replace(arrowRegex, (_, from, to, color) => {
      let colorIcon = "";
      const normalizedColor = color?.toLowerCase()?.trim() || "default";

      switch (normalizedColor) {
        case "red":
        case "r":
          colorIcon = "üî¥";
          break;
        case "green":
        case "g":
          colorIcon = "üü¢";
          break;
        case "blue":
        case "b":
          colorIcon = "üîµ";
          break;
        case "yellow":
        case "y":
          colorIcon = "üü°";
          break;
        case "orange":
        case "o":
          colorIcon = "üü†";
          break;
        default:
          colorIcon = "‚û§";
          break;
      }

      return `${colorIcon} ${from}‚Üí${to}`;
    });

    // Use the PgnParser function to properly remove clock annotations and empty braces
    formattedText = PgnParser.removeClockAndArrowsFromComment(formattedText);

    return formattedText;
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏ –∏ —á–∞—Å—ã
  static prepareCommentForSave(
    newText: string,
    currentComment: string
  ): string {
    const trimmedComment = newText.trim();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–µ–ª–∫–∏ –∏ —á–∞—Å—ã
    const existingArrows = PgnParser.extractArrowsFromComment(currentComment);
    const existingClock = PgnParser.extractClockFromComment(currentComment);

    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
    let finalComment = trimmedComment;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫–∏
    existingArrows.forEach((arrow) => {
      finalComment += ` [%draw arrow,${arrow.from},${arrow.to}${
        arrow.color ? `,${arrow.color}` : ""
      }]`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—ã
    if (existingClock) {
      finalComment += ` [%clk ${existingClock}]`;
    }

    return finalComment.trim();
  }
}
